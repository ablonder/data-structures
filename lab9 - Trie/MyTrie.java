/**
 * Implementation of a Trie
 * 
 * @author Aviva Blonder
 */

import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Iterator;

public class MyTrie extends AbstractSet<String>{
	boolean isWord;
	int size;
	MyTrie[] children;
	static final int num = 26;

	/**
	 * Creates an empty trie node with isWord false, size 0, and
	 * an array of null pointers for children
	 */
	public MyTrie(){
		isWord = false;
		children = new MyTrie[num];
		size = 0;
	}
	
	/**
	 * Returns the size of the trie
	 * @return size
	 */
	public int size(){
		return size;
	}
	
	/**
	 * Returns whether the trie contains the empty string
	 * @return isWord
	 */
	public boolean containsEmptyString(){
		return isWord;
	}
	
	/**
	 * Returns whether the trie contains string
	 * @param string
	 * @return true if string is empty and isWord
	 * @return whether the trie at the index designated by the first letter of
	 * string contains string minus the first letter, if that trie exists
	 * @return false otherwise
	 */
	public boolean contains(String string){
		string = string.toLowerCase();
		if(string.equals("")){
			if(isWord) return true;
			return false;
		}
		int index = string.charAt(0) - 'a';
		if(children[index] != null)
			return children[index].contains(string.substring(1));
		return false;
	}
	
	/**
	 * Return whether the string is in the trie (not necessarily as a word)
	 * @param string
	 * @return true if string is empty
	 * @return whether the trie at index string[0] contains string[1:] if it exists
	 * @return false otherwise
	 */
	public boolean containsPrefix(String string){
		string = string.toLowerCase();
		if(string.equals("")) return true;
		int index = string.charAt(0) - 'a';
		if(children[index] != null)
			return children[index].containsPrefix(string.substring(1));
		return false;
	}
	
	/**
	 * Adds string to the trie
	 * @param string
	 * @return true if a new word is added
	 */
	public boolean add(String string){
		string = string.toLowerCase();
		if(string.equals("")){
			if(isWord) return false;
			isWord = true;
			return true;
		}
		while(!Character.isLetter(string.charAt(0))){
			string = string.substring(1);
			if(string.equals("")){
				if(isWord) return false;
				isWord = true;
				return true;
			}
		}
		int index = string.charAt(0) - 'a';
		if(children[index] == null){
			children[index] = new MyTrie();
		}
		if(children[index].add(string.substring(1))){
			size++;
			return true;
		}
		return false;
	}
	
	/**
	 * Returns whether the trie contains any strings
	 * @return true if size is 0 and false otherwise
	 */
	public boolean isEmpty(){
		if(size == 0) return true;
		return false;
	}
	
	/**
	 * Returns a string representation of the trie
	 * @return toString of list representation of the trie generated by toList
	 */
	public String toString(){
		return toList().toString();
	}
	
	public Iterator<String> iterator(){
		return toList().iterator();
	}
	
	/**
	 * Returns a list representation of the trie
	 * @return list of all the words in the trie
	 */
	private ArrayList<String> toList(){
		ArrayList<String> list = new ArrayList<String>();
		words("", list);
		return list;
	}
	
	/**
	 * toList() helper, goes through the trie and adds all words to list
	 * @param pre
	 * @param list
	 */
	private void words(String pre, ArrayList<String> list){
		if(isWord) list.add(pre);
		for(int i = 0; i < num; i++){
			char letter = (char) ((int) 'a' + i);
			if(children[i] != null)
				children[i].words(pre + letter, list);
		}
	}
}
